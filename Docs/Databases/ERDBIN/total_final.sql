
CREATE TABLE A_QNA
(
  A_QUESTIONS_ID VARCHAR(50)  NOT NULL COMMENT '질문아이디',
  A_ANSWER       VARCHAR(500) NOT NULL COMMENT '답항 내용',
  A_ANSWER_ID    VARCHAR(50)  NOT NULL COMMENT '답항 코드',
  PRIMARY KEY (A_ANSWER_ID)
) COMMENT 'A 질문과 답';

CREATE TABLE A_Questions_Code
(
  A_QUESTIONS    VARCHAR(500) NOT NULL COMMENT '질문내용',
  A_QUESTIONS_ID VARCHAR(50)  NOT NULL COMMENT '질문아이디',
  PRIMARY KEY (A_QUESTIONS_ID)
) COMMENT '환자/가족 질문 코드';

CREATE TABLE A_RESULT
(
  MEMBERID    VARCHAR(50) NOT NULL COMMENT '회원아이디',
  A_ANSWER_ID VARCHAR(50) NOT NULL COMMENT '답항 코드',
  A_RESULT_ID VARCHAR(50) NOT NULL COMMENT '회원답변코드',
  PRIMARY KEY (A_RESULT_ID)
) COMMENT '환자/가족 설문 결과';

CREATE TABLE B_QNA
(
  B_QUESTIONS_ID VARCHAR(50)  NOT NULL COMMENT '질문아이디',
  B_ANSWER       VARCHAR(500) NOT NULL COMMENT '답항 내용',
  B_ANSWER_ID    VARCHAR(50)  NOT NULL COMMENT '답항 코드',
  PRIMARY KEY (B_ANSWER_ID)
) COMMENT 'B 질문과 답';

CREATE TABLE B_Questions_Code
(
  B_QUESTIONS    VARCHAR(500) NOT NULL COMMENT '질문내용',
  B_QUESTIONS_ID VARCHAR(50)  NOT NULL COMMENT '질문아이디',
  PRIMARY KEY (B_QUESTIONS_ID)
) COMMENT '파트너 질문 코드';

CREATE TABLE B_RESULT
(
  B_RESULT_ID VARCHAR(50) NOT NULL COMMENT '회원답변코드',
  MEMBERID    VARCHAR(50) NOT NULL COMMENT '회원아이디',
  B_ANSWER_ID VARCHAR(50) NOT NULL COMMENT '답항 코드',
  PRIMARY KEY (B_RESULT_ID)
) COMMENT '파트너 설문 결과';

CREATE TABLE COMMONS_CODE
(
  COMMON_CODE_ID        varchar(40)   NOT NULL COMMENT '공통 코드_ID',
  NAME                  varchar(1000) NOT NULL COMMENT '명칭',
  ORDER_NUMBER          decimal       NULL     COMMENT '정렬순서',
  ATTRIBUTION_1         varchar(60)   NULL     COMMENT '속성_1',
  ATTRIBUTION_2         varchar(60)   NULL     COMMENT '속성_2',
  DESCRIPTION           varchar(1000) NULL     COMMENT '코드설명',
  SYSTEM_CODE_YN        varchar(40)   NOT NULL DEFAULT N COMMENT '초기 시스템 코드 여부',
  USE_YN                varchar(40)   NOT NULL COMMENT '사용 여부',
  REGISTER_SEQ          varchar(50)   NOT NULL COMMENT '등록자SEQ',
  REGISTRY_DATE         varchar(20)   NOT NULL COMMENT '등록일자',
  MODIFIER_SEQ          varchar(40)   NOT NULL COMMENT '수정자_SEQ',
  MODIFY_DATE           varchar(20)   NOT NULL COMMENT '수정일자',
  PARENT_COMMON_CODE_ID varchar(40)   NULL     COMMENT '상위_공통 코드_ID',
  PRIMARY KEY (COMMON_CODE_ID)
);

CREATE TABLE GENDER
(
  GENDER    VARCHAR(50) NOT NULL COMMENT '성별',
  GENDER_ID VARCHAR(50) NOT NULL COMMENT '성별ID',
  PRIMARY KEY (GENDER_ID)
) COMMENT '성별';

CREATE TABLE LEVEL
(
  LEVEL    VARCHAR(50) NULL     COMMENT '치매진행단계',
  LEVEL_ID VARCHAR(50) NOT NULL COMMENT '치매진행단계ID',
  PRIMARY KEY (LEVEL_ID)
);

CREATE TABLE MATCHING_A
(
  MEMBERID         VARCHAR(50) NOT NULL COMMENT '회원아이디',
  GENDER_ID        VARCHAR(50) NOT NULL COMMENT '성별ID',
  PATIENTGENDER_ID VARCHAR(50) NOT NULL COMMENT '환자성별ID',
  LEVEL_ID         VARCHAR(50) NOT NULL COMMENT '치매진행단계ID',
  A_RESULT_ID      VARCHAR(50) NOT NULL COMMENT '회원답변코드'
) COMMENT '설문A 매칭용';

CREATE TABLE MATCHING_B
(
  MEMBERID    VARCHAR(50) NOT NULL COMMENT '회원아이디',
  GENDER_ID   VARCHAR(50) NOT NULL COMMENT '성별ID',
  BIRTHDATE   INTEGER(50) NOT NULL COMMENT '생년월일',
  B_RESULT_ID VARCHAR(50) NOT NULL COMMENT '회원답변코드'
) COMMENT '설문B 매칭용';

CREATE TABLE MEDICALDEPARTMENT
(
  MEDICALDEPARTMENT    VARCHAR(50) NOT NULL COMMENT '진료과',
  MEDICALDEPARTMENT_ID VARCHAR(50) NOT NULL COMMENT '진료과ID',
  PRIMARY KEY (MEDICALDEPARTMENT_ID)
) COMMENT '진료과';

CREATE TABLE MEMBER_D
(
  CLINICNAME           VARCHAR(50) NOT NULL COMMENT '병원이름',
  MEMBERID             VARCHAR(50) NOT NULL COMMENT '회원아이디',
  MEDICALDEPARTMENT_ID VARCHAR(50) NOT NULL COMMENT '진료과ID'
) COMMENT '전문의';

CREATE TABLE MEMBER_F
(
  MEMBERID         VARCHAR(50) NOT NULL COMMENT '회원아이디',
  PATIENTGENDER_ID VARCHAR(50) NOT NULL COMMENT '환자성별ID',
  LEVEL_ID         VARCHAR(50) NOT NULL COMMENT '치매진행단계ID'
) COMMENT '가족';

CREATE TABLE MEMBER_S
(
  LEVEL_ID VARCHAR(50) NOT NULL COMMENT '치매진행단계ID',
  MEMBERID VARCHAR(50) NOT NULL COMMENT '회원아이디'
) COMMENT '본인';

CREATE TABLE MEMBERS
(
  PHOTO         VARCHAR(500) NOT NULL COMMENT '회원 사진',
  TYPE_ID       VARCHAR(50)  NOT NULL COMMENT '회원유형ID',
  MEMBERID      VARCHAR(50)  NOT NULL COMMENT '회원아이디',
  MEMBERPW      VARCHAR(50)  NOT NULL COMMENT '비밀번호',
  MEMBERNAME    VARCHAR(50)  NOT NULL COMMENT '이름',
  GENDER_ID     VARCHAR(50)  NOT NULL COMMENT '성별ID',
  BIRTHDATE     INTEGER(50)  NOT NULL COMMENT '생년월일',
  PHONENUMBER   INTEGER(50)  NOT NULL COMMENT '전화번호',
  MEMBERADDRESS VARCHAR(500) NOT NULL COMMENT '주소',
  EMAIL         VARCHAR(50)  NOT NULL COMMENT '이메일',
  INTRODUCTION  VARCHAR(500) NOT NULL COMMENT '자기소개',
  PRIMARY KEY (MEMBERID)
) COMMENT '회원DB';

CREATE TABLE PAGE
(
  COMMENT_CONTENT VARCHAR(500) NOT NULL COMMENT '댓글내용',
  COMMENT_DATE    VARCHAR(50)  NOT NULL COMMENT '작성일자',
  MEMBERID        VARCHAR(50)  NOT NULL COMMENT '사용자ID',
  POST_ID         VARCHAR(50)  NOT NULL COMMENT '게시글ID',
  COMMENT_ID      VARCHAR(50)  NOT NULL COMMENT '댓글ID',
  PRIMARY KEY (COMMENT_ID)
) COMMENT '게시글+댓글 페이지';

CREATE TABLE PATIENTGENDER
(
  PATIENTGENDER    VARCHAR(50) NOT NULL COMMENT '환자성별',
  PATIENTGENDER_ID VARCHAR(50) NOT NULL COMMENT '환자성별ID',
  PRIMARY KEY (PATIENTGENDER_ID)
) COMMENT '환자성별';

CREATE TABLE POST
(
  POST_TITLE   VARCHAR(50)  NOT NULL COMMENT '제목',
  POST_DATE    VARCHAR(50)  NOT NULL COMMENT '작성일자',
  POST_CONTENT VARCHAR(500) NOT NULL COMMENT '내용',
  MEMBERID     VARCHAR(50)  NOT NULL COMMENT '사용자ID',
  POST_ID      VARCHAR(50)  NOT NULL COMMENT '게시글ID',
  PRIMARY KEY (POST_ID)
) COMMENT '게시글';

CREATE TABLE SELFTEST_ANS_CODE
(
  ST_ANSWERS   VARCHAR(50) NOT NULL COMMENT '답변 종류',
  ST_ANS_SCORE INTEGER     NOT NULL COMMENT '답변 점수',
  PRIMARY KEY (ST_ANS_SCORE)
) COMMENT '답변 코드';

CREATE TABLE SELFTEST_CODE
(
  ST_QUESTIONS VARCHAR(500) NOT NULL COMMENT '자가진단 질문',
  ST_Q_CODE    VARCHAR(50)  NOT NULL COMMENT '질문 코드',
  PRIMARY KEY (ST_Q_CODE)
) COMMENT '질문 코드';

CREATE TABLE SELFTEST_MEMBER
(
  ST_QNA_CODE VARCHAR(50) NOT NULL,
  MEMBERID    VARCHAR(50) NOT NULL COMMENT '회원아이디'
);

CREATE TABLE SELFTEST_QNA
(
  ST_Q_CODE    VARCHAR(50) NOT NULL COMMENT '질문 코드',
  ST_ANS_SCORE INTEGER     NOT NULL COMMENT '답변 점수',
  ST_QNA_CODE  VARCHAR(50) NOT NULL COMMENT '질답 코드',
  PRIMARY KEY (ST_QNA_CODE)
) COMMENT '자가진단 메인 화면';

CREATE TABLE TYPE
(
  TYPE    VARCHAR(50) NOT NULL COMMENT '회원유형',
  TYPE_ID VARCHAR(50) NOT NULL COMMENT '회원유형ID',
  PRIMARY KEY (TYPE_ID)
) COMMENT '회원유형';

ALTER TABLE MEMBERS
  ADD CONSTRAINT FK_GENDER_TO_MEMBERS
    FOREIGN KEY (GENDER_ID)
    REFERENCES GENDER (GENDER_ID);

ALTER TABLE MEMBERS
  ADD CONSTRAINT FK_TYPE_TO_MEMBERS
    FOREIGN KEY (TYPE_ID)
    REFERENCES TYPE (TYPE_ID);

ALTER TABLE MEMBERS
  ADD CONSTRAINT FK_GENDER_TO_MEMBERS1
    FOREIGN KEY (GENDER_ID)
    REFERENCES GENDER (GENDER_ID);

ALTER TABLE PAGE
  ADD CONSTRAINT FK_MEMBERS_TO_PAGE
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE PAGE
  ADD CONSTRAINT FK_POST_TO_PAGE
    FOREIGN KEY (POST_ID)
    REFERENCES POST (POST_ID);

ALTER TABLE POST
  ADD CONSTRAINT FK_MEMBERS_TO_POST
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE MATCHING_A
  ADD CONSTRAINT FK_MEMBERS_TO_MATCHING_A
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE MATCHING_A
  ADD CONSTRAINT FK_GENDER_TO_MATCHING_A
    FOREIGN KEY (GENDER_ID)
    REFERENCES GENDER (GENDER_ID);

ALTER TABLE MATCHING_A
  ADD CONSTRAINT FK_PATIENTGENDER_TO_MATCHING_A
    FOREIGN KEY (PATIENTGENDER_ID)
    REFERENCES PATIENTGENDER (PATIENTGENDER_ID);

ALTER TABLE MATCHING_A
  ADD CONSTRAINT FK_LEVEL_TO_MATCHING_A
    FOREIGN KEY (LEVEL_ID)
    REFERENCES LEVEL (LEVEL_ID);

ALTER TABLE MEMBER_F
  ADD CONSTRAINT FK_PATIENTGENDER_TO_MEMBER_F
    FOREIGN KEY (PATIENTGENDER_ID)
    REFERENCES PATIENTGENDER (PATIENTGENDER_ID);

ALTER TABLE MEMBER_F
  ADD CONSTRAINT FK_LEVEL_TO_MEMBER_F
    FOREIGN KEY (LEVEL_ID)
    REFERENCES LEVEL (LEVEL_ID);

ALTER TABLE MEMBER_F
  ADD CONSTRAINT FK_MEMBERS_TO_MEMBER_F
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE MEMBER_F
  ADD CONSTRAINT FK_MEMBERS_TO_MEMBER_F1
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE MEMBER_F
  ADD CONSTRAINT FK_LEVEL_TO_MEMBER_F1
    FOREIGN KEY (LEVEL_ID)
    REFERENCES LEVEL (LEVEL_ID);

ALTER TABLE MEMBER_F
  ADD CONSTRAINT FK_PATIENTGENDER_TO_MEMBER_F1
    FOREIGN KEY (PATIENTGENDER_ID)
    REFERENCES PATIENTGENDER (PATIENTGENDER_ID);

ALTER TABLE MEMBER_S
  ADD CONSTRAINT FK_LEVEL_TO_MEMBER_S
    FOREIGN KEY (LEVEL_ID)
    REFERENCES LEVEL (LEVEL_ID);

ALTER TABLE MEMBER_S
  ADD CONSTRAINT FK_MEMBERS_TO_MEMBER_S
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE MEMBER_S
  ADD CONSTRAINT FK_LEVEL_TO_MEMBER_S1
    FOREIGN KEY (LEVEL_ID)
    REFERENCES LEVEL (LEVEL_ID);

ALTER TABLE MEMBER_S
  ADD CONSTRAINT FK_MEMBERS_TO_MEMBER_S1
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE MATCHING_B
  ADD CONSTRAINT FK_GENDER_TO_MATCHING_B
    FOREIGN KEY (GENDER_ID)
    REFERENCES GENDER (GENDER_ID);

ALTER TABLE MATCHING_B
  ADD CONSTRAINT FK_MEMBERS_TO_MATCHING_B
    FOREIGN KEY (MEMBERID, BIRTHDATE)
    REFERENCES MEMBERS (MEMBERID, BIRTHDATE);

ALTER TABLE COMMONS_CODE
  ADD CONSTRAINT FK_COMMONS_CODE_TO_COMMONS_CODE
    FOREIGN KEY (PARENT_COMMON_CODE_ID)
    REFERENCES COMMONS_CODE (COMMON_CODE_ID);

ALTER TABLE MEMBER_D
  ADD CONSTRAINT FK_MEMBERS_TO_MEMBER_D
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE MEMBER_D
  ADD CONSTRAINT FK_MEDICALDEPARTMENT_TO_MEMBER_D
    FOREIGN KEY (MEDICALDEPARTMENT_ID)
    REFERENCES MEDICALDEPARTMENT (MEDICALDEPARTMENT_ID);

ALTER TABLE SELFTEST_QNA
  ADD CONSTRAINT FK_SELFTEST_CODE_TO_SELFTEST_QNA
    FOREIGN KEY (ST_Q_CODE)
    REFERENCES SELFTEST_CODE (ST_Q_CODE);

ALTER TABLE SELFTEST_QNA
  ADD CONSTRAINT FK_SELFTEST_ANS_CODE_TO_SELFTEST_QNA
    FOREIGN KEY (ST_ANS_SCORE)
    REFERENCES SELFTEST_ANS_CODE (ST_ANS_SCORE);

ALTER TABLE SELFTEST_MEMBER
  ADD CONSTRAINT FK_SELFTEST_QNA_TO_SELFTEST_MEMBER
    FOREIGN KEY (ST_QNA_CODE)
    REFERENCES SELFTEST_QNA (ST_QNA_CODE);

ALTER TABLE SELFTEST_MEMBER
  ADD CONSTRAINT FK_MEMBERS_TO_SELFTEST_MEMBER
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE A_QNA
  ADD CONSTRAINT FK_A_Questions_Code_TO_A_QNA
    FOREIGN KEY (A_QUESTIONS_ID)
    REFERENCES A_Questions_Code (A_QUESTIONS_ID);

ALTER TABLE A_RESULT
  ADD CONSTRAINT FK_MEMBERS_TO_A_RESULT
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE A_RESULT
  ADD CONSTRAINT FK_A_QNA_TO_A_RESULT
    FOREIGN KEY (A_ANSWER_ID)
    REFERENCES A_QNA (A_ANSWER_ID);

ALTER TABLE MATCHING_A
  ADD CONSTRAINT FK_A_RESULT_TO_MATCHING_A
    FOREIGN KEY (A_RESULT_ID)
    REFERENCES A_RESULT (A_RESULT_ID);

ALTER TABLE B_QNA
  ADD CONSTRAINT FK_B_Questions_Code_TO_B_QNA
    FOREIGN KEY (B_QUESTIONS_ID)
    REFERENCES B_Questions_Code (B_QUESTIONS_ID);

ALTER TABLE B_RESULT
  ADD CONSTRAINT FK_MEMBERS_TO_B_RESULT
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE B_RESULT
  ADD CONSTRAINT FK_B_QNA_TO_B_RESULT
    FOREIGN KEY (B_ANSWER_ID)
    REFERENCES B_QNA (B_ANSWER_ID);

ALTER TABLE MATCHING_B
  ADD CONSTRAINT FK_B_RESULT_TO_MATCHING_B
    FOREIGN KEY (B_RESULT_ID)
    REFERENCES B_RESULT (B_RESULT_ID);
