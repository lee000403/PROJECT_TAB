-- 공통코드
CREATE TABLE COMMONS_CODE
(
	-- 공통 코드_ID(사용자 입력 가능)
	COMMON_CODE_ID varchar(40) NOT NULL COMMENT '공통 코드_ID',
	-- 명칭
	NAME varchar(1000) NOT NULL COMMENT '명칭',
	-- 정렬순서
	ORDER_NUMBER decimal COMMENT '정렬순서',
	-- 속성_1 
	ATTRIBUTION_1 varchar(60) COMMENT '속성_1',
	-- 속성_2
	ATTRIBUTION_2 varchar(60) COMMENT '속성_2',
	DESCRIPTION varchar(1000) COMMENT '코드설명',
	-- 삭제불가(초기 시스템 코드 or 카테고리)
	SYSTEM_CODE_YN varchar(40) DEFAULT 'N' NOT NULL COMMENT '초기 시스템 코드 여부',
	-- 사용 여부
	USE_YN varchar(40) NOT NULL COMMENT '사용 여부',
	-- 공통 코드_ID(사용자 입력 가능)
	PARENT_COMMON_CODE_ID varchar(40) COMMENT '상위 공통 코드 ID',
	-- 등록자SEQ
	REGISTER_SEQ varchar(50) NOT NULL COMMENT '등록자SEQ',
	-- 등록일자
	REGISTRY_DATE varchar(20) NOT NULL COMMENT '등록일자',
	MODIFIER_SEQ varchar(40) NOT NULL COMMENT '수정자_SEQ',
	-- 수정일자
	MODIFY_DATE varchar(20) NOT NULL COMMENT '수정일자',
	PRIMARY KEY (COMMON_CODE_ID)
) COMMENT = '공통코드';


CREATE TABLE GENDER
(
  GENDER    VARCHAR(50) NOT NULL COMMENT '성별',
  GENDER_ID VARCHAR(50) NOT NULL COMMENT '성별ID',
  PRIMARY KEY (GENDER_ID)
) COMMENT '성별';

CREATE TABLE LEVEL
(
  LEVEL    VARCHAR(50) NOT NULL COMMENT '치매진행단계',
  LEVEL_ID VARCHAR(50) NOT NULL COMMENT '치매진행단계ID',
  PRIMARY KEY (LEVEL_ID)
) COMMENT '치매진행단계';

CREATE TABLE MEMBER_S
(
  PHOTO        VARCHAR(500) NOT NULL COMMENT '회원 사진',
  TYPE_ID      VARCHAR(50)  NOT NULL COMMENT '회원유형ID',
  MEMBERID     VARCHAR(50)  NOT NULL COMMENT '회원아이디',
  PASSWORD     VARCHAR(50)  NOT NULL COMMENT '비밀번호',
  NAME         VARCHAR(50)  NOT NULL COMMENT '이름',
  GENDER_ID    VARCHAR(50)  NOT NULL COMMENT '성별ID',
  BIRTHDATE    INTEGER(50)  NOT NULL COMMENT '생년월일',
  PHONENUMBER  INTEGER(50)  NOT NULL COMMENT '전화번호',
  ADDRESS      VARCHAR(500) NOT NULL COMMENT '주소',
  EMAIL        VARCHAR(50)  NOT NULL COMMENT '이메일',
  INTRODUCTION VARCHAR(500) NOT NULL COMMENT '자기소개'
) COMMENT '본인회원DB';

CREATE TABLE MEMBERID
(
  MEMBERID VARCHAR(50) NOT NULL COMMENT '회원아이디',
  LEVEL_ID VARCHAR(50) NOT NULL COMMENT '치매진행단계ID',
  PRIMARY KEY (MEMBERID)
) COMMENT '회원아이디';

CREATE TABLE TYPE
(
  TYPE    VARCHAR(50) NOT NULL COMMENT '회원유형',
  TYPE_ID VARCHAR(50) NOT NULL COMMENT '회원유형ID',
  PRIMARY KEY (TYPE_ID)
) COMMENT '회원유형';

ALTER TABLE MEMBER_S
  ADD CONSTRAINT FK_TYPE_TO_MEMBER_S
    FOREIGN KEY (TYPE_ID)
    REFERENCES TYPE (TYPE_ID);

ALTER TABLE MEMBER_S
  ADD CONSTRAINT FK_GENDER_TO_MEMBER_S
    FOREIGN KEY (GENDER_ID)
    REFERENCES GENDER (GENDER_ID);

ALTER TABLE MEMBERID
  ADD CONSTRAINT FK_LEVEL_TO_MEMBERID
    FOREIGN KEY (LEVEL_ID)
    REFERENCES LEVEL (LEVEL_ID);

ALTER TABLE MEMBER_S
  ADD CONSTRAINT FK_MEMBERID_TO_MEMBER_S
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERID (MEMBERID);


CREATE TABLE GENDER
(
  GENDER    VARCHAR(50) NOT NULL COMMENT '성별',
  GENDER_ID VARCHAR(50) NOT NULL COMMENT '성별ID',
  PRIMARY KEY (GENDER_ID)
) COMMENT '성별';

CREATE TABLE LEVEL
(
  LEVEL    INTEGER(50) NOT NULL COMMENT '치매진행단계',
  LEVEL_ID VARCHAR(50) NOT NULL COMMENT '치매진행단계ID',
  PRIMARY KEY (LEVEL_ID)
) COMMENT '치매진행단계';

CREATE TABLE MEMBER_F
(
  PHOTO        VARCHAR(500) NOT NULL COMMENT '회원 사진',
  TYPE_ID      VARCHAR(50)  NOT NULL COMMENT '회원유형ID',
  MEMBERID     VARCHAR(50)  NOT NULL COMMENT '회원아이디',
  PASSWORD     VARCHAR(50)  NOT NULL COMMENT '비밀번호',
  NAME         VARCHAR(50)  NOT NULL COMMENT '이름',
  GENDER_ID    VARCHAR(50)  NOT NULL COMMENT '성별ID',
  BIRTHDATE    INTEGER(50)  NOT NULL COMMENT '생년월일',
  PHONENUMBER  INTEGER(50)  NOT NULL COMMENT '전화번호',
  ADDRESS      VARCHAR(500) NOT NULL COMMENT '주소',
  EMAIL        VARCHAR(50)  NOT NULL COMMENT '이메일',
  INTRODUCTION VARCHAR(500) NOT NULL COMMENT '자기소개'
) COMMENT '가족회원DB';

CREATE TABLE MEMBERID
(
  MEMBERID         VARCHAR(50) NOT NULL COMMENT '회원아이디',
  LEVEL_ID         VARCHAR(50) NOT NULL COMMENT '치매진행단계ID',
  PATIENTGENDER_ID VARCHAR(50) NOT NULL COMMENT '환자성별ID',
  PRIMARY KEY (MEMBERID)
) COMMENT '회원아이디';

CREATE TABLE PATIENTGENDER
(
  PATIENTGENDER    VARCHAR(50) NOT NULL COMMENT '환자성별',
  PATIENTGENDER_ID VARCHAR(50) NOT NULL COMMENT '환자성별ID',
  PRIMARY KEY (PATIENTGENDER_ID)
) COMMENT '환자성별';

CREATE TABLE TYPE
(
  TYPE    VARCHAR(50) NOT NULL COMMENT '회원유형',
  TYPE_ID VARCHAR(50) NOT NULL COMMENT '회원유형ID',
  PRIMARY KEY (TYPE_ID)
) COMMENT '회원유형';

ALTER TABLE MEMBER_F
  ADD CONSTRAINT FK_TYPE_TO_MEMBER_F
    FOREIGN KEY (TYPE_ID)
    REFERENCES TYPE (TYPE_ID);

ALTER TABLE MEMBER_F
  ADD CONSTRAINT FK_GENDER_TO_MEMBER_F
    FOREIGN KEY (GENDER_ID)
    REFERENCES GENDER (GENDER_ID);

ALTER TABLE MEMBER_F
  ADD CONSTRAINT FK_MEMBERID_TO_MEMBER_F
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERID (MEMBERID);

ALTER TABLE MEMBERID
  ADD CONSTRAINT FK_LEVEL_TO_MEMBERID
    FOREIGN KEY (LEVEL_ID)
    REFERENCES LEVEL (LEVEL_ID);

ALTER TABLE MEMBERID
  ADD CONSTRAINT FK_PATIENTGENDER_TO_MEMBERID
    FOREIGN KEY (PATIENTGENDER_ID)
    REFERENCES PATIENTGENDER (PATIENTGENDER_ID);


CREATE TABLE GENDER
(
  GENDER    VARCHAR(50) NOT NULL COMMENT '성별',
  GENDER_ID VARCHAR(50) NOT NULL COMMENT '성별ID',
  PRIMARY KEY (GENDER_ID)
) COMMENT '성별';

CREATE TABLE MEMBER_P
(
  PHOTO        VARCHAR(500) NOT NULL COMMENT '회원 사진',
  TYPE_ID      VARCHAR(50)  NOT NULL COMMENT '회원유형ID',
  MEMBERID     VARCHAR(50)  NOT NULL COMMENT '회원아이디',
  PASSWORD     VARCHAR(50)  NOT NULL COMMENT '비밀번호',
  NAME         VARCHAR(50)  NOT NULL COMMENT '이름',
  GENDER_ID    VARCHAR(50)  NOT NULL COMMENT '성별ID',
  BIRTHDATE    INTEGER(50)  NOT NULL COMMENT '생년월일',
  PHONENUMBER  INTEGER(50)  NOT NULL COMMENT '전화번호',
  ADDRESS      VARCHAR(500) NOT NULL COMMENT '주소',
  EMAIL        VARCHAR(50)  NOT NULL COMMENT '이메일',
  INTRODUCTION VARCHAR(500) NOT NULL COMMENT '자기소개'
) COMMENT '파트너회원DB';

CREATE TABLE TYPE
(
  TYPE    VARCHAR(50) NOT NULL COMMENT '회원유형',
  TYPE_ID VARCHAR(50) NOT NULL COMMENT '회원유형ID',
  PRIMARY KEY (TYPE_ID)
) COMMENT '회원유형';

ALTER TABLE MEMBER_P
  ADD CONSTRAINT FK_TYPE_TO_MEMBER_P
    FOREIGN KEY (TYPE_ID)
    REFERENCES TYPE (TYPE_ID);

ALTER TABLE MEMBER_P
  ADD CONSTRAINT FK_GENDER_TO_MEMBER_P
    FOREIGN KEY (GENDER_ID)
    REFERENCES GENDER (GENDER_ID);



CREATE TABLE CLINICNAME
(
  CLINICNAME VARCHAR(50) NOT NULL COMMENT '병원이름',
  PRIMARY KEY (CLINICNAME)
) COMMENT '병원이름';

CREATE TABLE GENDER
(
  GENDER    VARCHAR(50) NOT NULL COMMENT '성별',
  GENDER_ID VARCHAR(50) NOT NULL COMMENT '성별ID',
  PRIMARY KEY (GENDER_ID)
) COMMENT '성별';

CREATE TABLE MEDICALDEPARTMENT
(
  MEDICALDEPARTMENT    VARCHAR(50) NOT NULL COMMENT '진료과',
  MEDICALDEPARTMENT_ID VARCHAR(50) NOT NULL COMMENT '진료과ID',
  CLINICNAME           VARCHAR(50) NOT NULL COMMENT '병원이름',
  PRIMARY KEY (MEDICALDEPARTMENT_ID)
) COMMENT '진료과';

CREATE TABLE MEMBER_D
(
  PHOTO        VARCHAR(500) NOT NULL COMMENT '회원 사진',
  TYPE_ID      VARCHAR(50)  NOT NULL COMMENT '회원유형ID',
  MEMBERID     VARCHAR(50)  NOT NULL COMMENT '회원아이디',
  PASSWORD     VARCHAR(50)  NOT NULL COMMENT '비밀번호',
  NAME         VARCHAR(50)  NOT NULL COMMENT '이름',
  GENDER_ID    VARCHAR(50)  NOT NULL COMMENT '성별ID',
  BIRTHDATE    INTEGER(50)  NOT NULL COMMENT '생년월일',
  PHONENUMBER  INTEGER(50)  NOT NULL COMMENT '전화번호',
  ADDRESS      VARCHAR(500) NOT NULL COMMENT '주소',
  EMAIL        VARCHAR(50)  NOT NULL COMMENT '이메일',
  INTRODUCTION VARCHAR(500) NOT NULL COMMENT '자기소개'
) COMMENT '전문의회원DB';

CREATE TABLE MEMBERID
(
  MEMBERID             VARCHAR(50) NOT NULL COMMENT '회원아이디',
  MEDICALDEPARTMENT_ID VARCHAR(50) NOT NULL COMMENT '진료과ID',
  PRIMARY KEY (MEMBERID)
) COMMENT '회원아이디';

CREATE TABLE TYPE
(
  TYPE    VARCHAR(50) NOT NULL COMMENT '회원유형',
  TYPE_ID VARCHAR(50) NOT NULL COMMENT '회원유형ID',
  PRIMARY KEY (TYPE_ID)
) COMMENT '회원유형';

ALTER TABLE MEMBER_D
  ADD CONSTRAINT FK_TYPE_TO_MEMBER_D
    FOREIGN KEY (TYPE_ID)
    REFERENCES TYPE (TYPE_ID);

ALTER TABLE MEMBER_D
  ADD CONSTRAINT FK_GENDER_TO_MEMBER_D
    FOREIGN KEY (GENDER_ID)
    REFERENCES GENDER (GENDER_ID);

ALTER TABLE MEMBER_D
  ADD CONSTRAINT FK_MEMBERID_TO_MEMBER_D
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERID (MEMBERID);

ALTER TABLE MEMBERID
  ADD CONSTRAINT FK_MEDICALDEPARTMENT_TO_MEMBERID
    FOREIGN KEY (MEDICALDEPARTMENT_ID)
    REFERENCES MEDICALDEPARTMENT (MEDICALDEPARTMENT_ID);

ALTER TABLE MEDICALDEPARTMENT
  ADD CONSTRAINT FK_CLINICNAME_TO_MEDICALDEPARTMENT
    FOREIGN KEY (CLINICNAME)
    REFERENCES CLINICNAME (CLINICNAME);
