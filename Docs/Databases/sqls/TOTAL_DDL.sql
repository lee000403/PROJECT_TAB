USE PROJECT_DEMENTIA;

CREATE TABLE AUTH_NAMES
(
  AUTH_NAME VARCHAR(200) NOT NULL COMMENT '접근권한명',
  MEMBERID  VARCHAR(200) NOT NULL COMMENT '접근권한 대표값',
  PRIMARY KEY (MEMBERID)
) COMMENT '접근권한명';

CREATE TABLE AUTH_NAMES
(
  AUTH_NAME VARCHAR(200) NOT NULL COMMENT '권한 이름',
  MEMBERID  VARCHAR(200) NOT NULL COMMENT '멤버 아이디',
  PRIMARY KEY (MEMBERID)
);

CREATE TABLE AUTHS
(
  MEMBERID_USERS      VARCHAR(200) NOT NULL COMMENT '대표값',
  MEMBERID_AUTH_NAMES VARCHAR(200) NOT NULL COMMENT '접근권한 대표값',
  PRIMARY KEY (MEMBERID_USERS, MEMBERID_AUTH_NAMES)
) COMMENT '권한들';

CREATE TABLE AUTHS
(
  MEMBER_ID_USERS      VARCHAR(50)  NOT NULL COMMENT '회원아이디',
  MEMBER_ID_AUTH_NAMES VARCHAR(200) NOT NULL COMMENT '멤버 아이디',
  PRIMARY KEY (MEMBER_ID_USERS, MEMBER_ID_AUTH_NAMES)
);

CREATE TABLE CENTER_TYPE
(
  CENTER_TYPE    VARCHAR(500) NOT NULL COMMENT '치매센터종류',
  CENTER_TYPE_ID VARCHAR(50)  NOT NULL COMMENT '치매센터코드',
  PRIMARY KEY (CENTER_TYPE_ID)
) COMMENT '치매센터종류';

CREATE TABLE CENTERS
(
  CENTER_NAME    VARCHAR(500) NOT NULL COMMENT '시설명',
  CENTER_ADD     VARCHAR(500) NOT NULL COMMENT '주소',
  CENTER_NUM     VARCHAR(50)  NOT NULL COMMENT '전화번호',
  CENTER_TYPE_ID VARCHAR(50)  NOT NULL COMMENT '치매센터코드'
) COMMENT '치매센터검색';

CREATE TABLE COMMONS_CODE
(
  COMMON_CODE_ID        varchar(40)   NOT NULL COMMENT '공통 코드_ID',
  NAME                  varchar(1000) NOT NULL COMMENT '명칭',
  ORDER_NUMBER          decimal       NULL     COMMENT '정렬순서',
  ATTRIBUTION_1         varchar(60)   NULL     COMMENT '속성_1',
  ATTRIBUTION_2         varchar(60)   NULL     COMMENT '속성_2',
  DESCRIPTION           varchar(1000) NULL     COMMENT '코드설명',
  SYSTEM_CODE_YN        varchar(40)   NOT NULL COMMENT '초기 시스템 코드 여부',
  USE_YN                varchar(40)   NOT NULL COMMENT '사용 여부',
  REGISTER_SEQ          varchar(50)   NOT NULL COMMENT '등록자SEQ',
  REGISTRY_DATE         varchar(20)   NOT NULL COMMENT '등록일자',
  MODIFIER_SEQ          varchar(40)   NOT NULL COMMENT '수정자_SEQ',
  MODIFY_DATE           varchar(20)   NOT NULL COMMENT '수정일자',
  PARENT_COMMON_CODE_ID varchar(40)   NULL     COMMENT '상위_공통 코드_ID',
  PRIMARY KEY (COMMON_CODE_ID)
);

CREATE TABLE COMMUNITY_PAGE
(
  COMMENT_CONTENT VARCHAR(1000) NOT NULL COMMENT '댓글내용',
  COMMENT_DATE    TIMESTAMP     NOT NULL COMMENT '작성일자',
  MEMBERID        VARCHAR(50)   NOT NULL COMMENT '사용자ID',
  POST_ID         VARCHAR(50)   NOT NULL COMMENT '게시글ID',
  COMMENT_ID      VARCHAR(50)   NOT NULL COMMENT '댓글ID',
  PRIMARY KEY (COMMENT_ID)
) COMMENT '게시글+댓글 페이지';

CREATE TABLE COMMUNITY_POST
(
  POST_TITLE   VARCHAR(50)   NOT NULL COMMENT '제목',
  POST_DATE    TIMESTAMP     NOT NULL COMMENT '작성일자',
  POST_CONTENT VARCHAR(1000) NOT NULL COMMENT '내용',
  MEMBERID     VARCHAR(50)   NOT NULL COMMENT '사용자ID',
  POST_ID      VARCHAR(50)   NOT NULL COMMENT '게시글ID',
  PRIMARY KEY (POST_ID)
) COMMENT '게시글';

CREATE TABLE DEMENTIA_STAGE
(
  STAGE    VARCHAR(50) NOT NULL COMMENT '치매진행단계',
  STAGE_ID VARCHAR(50) NOT NULL COMMENT '치매진행단계ID',
  PRIMARY KEY (STAGE_ID)
) COMMENT '치매진행단계';

CREATE TABLE GENDER
(
  GENDER    VARCHAR(50) NOT NULL COMMENT '성별',
  GENDER_ID VARCHAR(50) NOT NULL COMMENT '성별ID',
  PRIMARY KEY (GENDER_ID)
) COMMENT '성별';

CREATE TABLE MATCHING
(
  MEMBERID         VARCHAR(50) NOT NULL COMMENT '회원아이디',
  SURVEY_RESULT_ID VARCHAR(50) NOT NULL COMMENT '회원답변코드'
) COMMENT '설문 매칭용';

CREATE TABLE MEDICALDEPARTMENT
(
  MEDICALDEPARTMENT    VARCHAR(50) NOT NULL COMMENT '진료과',
  MEDICALDEPARTMENT_ID VARCHAR(50) NOT NULL COMMENT '진료과ID',
  PRIMARY KEY (MEDICALDEPARTMENT_ID)
) COMMENT '진료과';

CREATE TABLE MEMBER_D
(
  MEMBERID             VARCHAR(50) NOT NULL COMMENT '회원아이디',
  MEDICALDEPARTMENT_ID VARCHAR(50) NOT NULL COMMENT '진료과ID',
  CLINICNAME           VARCHAR(50) NOT NULL COMMENT '병원이름'
) COMMENT '전문의';

CREATE TABLE MEMBER_S_F
(
  MEMBERID         VARCHAR(50) NOT NULL COMMENT '회원아이디',
  MEMBERTYPE_ID    VARCHAR(50) NOT NULL COMMENT '회원유형ID',
  STAGE_ID         VARCHAR(50) NOT NULL COMMENT '치매진행단계ID',
  PATIENTGENDER_ID VARCHAR(50) NOT NULL COMMENT '환자성별ID'
) COMMENT '본인 및 가족';

CREATE TABLE MEMBERS
(
  PHOTO         VARCHAR(500) NULL     COMMENT '회원 사진',
  MEMBERTYPE_ID VARCHAR(50)  NOT NULL COMMENT '회원유형ID',
  MEMBERID      VARCHAR(50)  NOT NULL COMMENT '회원아이디',
  MEMBERPW      VARCHAR(500) NOT NULL COMMENT '비밀번호',
  MEMBERNAME    VARCHAR(50)  NOT NULL COMMENT '이름',
  GENDER_ID     VARCHAR(50)  NOT NULL COMMENT '성별ID',
  BIRTHDATE     VARCHAR(50)  NOT NULL COMMENT '생년월일',
  PHONENUMBER   VARCHAR(50)  NOT NULL COMMENT '전화번호',
  MEMBERADDRESS VARCHAR(500) NOT NULL COMMENT '주소',
  EMAIL         VARCHAR(50)  NOT NULL COMMENT '이메일',
  INTRODUCTION  VARCHAR(500) NULL     COMMENT '자기소개',
  PRIMARY KEY (MEMBERID)
) COMMENT '회원DB';

CREATE TABLE MEMBERTYPE
(
  MEMBERTYPE    VARCHAR(50) NOT NULL COMMENT '회원유형',
  MEMBERTYPE_ID VARCHAR(50) NOT NULL COMMENT '회원유형ID',
  PRIMARY KEY (MEMBERTYPE_ID)
) COMMENT '회원유형';

CREATE TABLE SELFTEST_ANS_CODE
(
  ST_ANSWERS   VARCHAR(50) NOT NULL COMMENT '답변 종류',
  ST_ANS_SCORE INTEGER     NOT NULL COMMENT '답변 점수',
  PRIMARY KEY (ST_ANS_SCORE)
) COMMENT '자가진단 답변 코드';

CREATE TABLE SELFTEST_CODE
(
  ST_QUESTIONS VARCHAR(500) NOT NULL COMMENT '자가진단 질문',
  ST_Q_CODE    VARCHAR(50)  NOT NULL COMMENT '질문 코드',
  PRIMARY KEY (ST_Q_CODE)
) COMMENT '자가진단 질문 코드';

CREATE TABLE SELFTEST_QNA
(
  ST_Q_CODE    VARCHAR(50) NOT NULL COMMENT '질문 코드',
  ST_ANS_SCORE INTEGER     NOT NULL COMMENT '답변 점수',
  ST_QNA_CODE  VARCHAR(50) NOT NULL COMMENT '질답 코드',
  PRIMARY KEY (ST_QNA_CODE)
) COMMENT '자가진단 메인 화면';

CREATE TABLE SELFTEST_RESULT
(
  MEMBERID       VARCHAR(50) NOT NULL COMMENT '회원아이디',
  ST_QNA_CODE    VARCHAR(50) NOT NULL COMMENT '질답 코드',
  ST_RESULT_CODE VARCHAR(50) NOT NULL COMMENT '결과코드'
) COMMENT '자가진단 결과';

CREATE TABLE SELFTEST_RESULT_CODE
(
  ST_RESULT      VARCHAR(50) NOT NULL COMMENT '결과내용',
  ST_RESULT_CODE VARCHAR(50) NOT NULL COMMENT '결과코드',
  PRIMARY KEY (ST_RESULT_CODE)
) COMMENT '자가진단 결과 코드';

CREATE TABLE SURVEY_QNA
(
  SURVEY_Q_ID   VARCHAR(50)  NOT NULL COMMENT '질문아이디',
  SURVEY_ANS    VARCHAR(500) NOT NULL COMMENT '답항 내용',
  SURVEY_ANS_ID VARCHAR(50)  NOT NULL COMMENT '답항 코드',
  PRIMARY KEY (SURVEY_ANS_ID)
) COMMENT '질문과 답';

CREATE TABLE SURVEY_QUESTIONS
(
  SURVEY_Q       VARCHAR(500) NOT NULL COMMENT '질문내용',
  SURVEY_TYPE_ID VARCHAR(50)  NOT NULL COMMENT '설문타입코드',
  SURVEY_Q_ID    VARCHAR(50)  NOT NULL COMMENT '질문아이디',
  PRIMARY KEY (SURVEY_Q_ID)
) COMMENT '질문 코드';

CREATE TABLE SURVEY_RESULT
(
  MEMBERID         VARCHAR(50) NOT NULL COMMENT '회원아이디',
  SURVEY_ANS_ID    VARCHAR(50) NOT NULL COMMENT '답항 코드',
  SURVEY_RESULT_ID VARCHAR(50) NOT NULL COMMENT '회원답변코드',
  PRIMARY KEY (SURVEY_RESULT_ID)
) COMMENT '설문 결과';

CREATE TABLE SURVEY_TYPE
(
  SURVEY_TYPE    VARCHAR(50) NOT NULL COMMENT '설문타입',
  SURVEY_TYPE_ID VARCHAR(50) NOT NULL COMMENT '설문타입코드',
  PRIMARY KEY (SURVEY_TYPE_ID)
) COMMENT '설문 타입 A/B';

ALTER TABLE CENTERS
  ADD CONSTRAINT FK_CENTER_TYPE_TO_CENTERS
    FOREIGN KEY (CENTER_TYPE_ID)
    REFERENCES CENTER_TYPE (CENTER_TYPE_ID);

ALTER TABLE COMMONS_CODE
  ADD CONSTRAINT FK_COMMONS_CODE_TO_COMMONS_CODE
    FOREIGN KEY (PARENT_COMMON_CODE_ID)
    REFERENCES COMMONS_CODE (COMMON_CODE_ID);

ALTER TABLE COMMUNITY_PAGE
  ADD CONSTRAINT FK_MEMBERS_TO_COMMUNITY_PAGE
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE COMMUNITY_PAGE
  ADD CONSTRAINT FK_COMMUNITY_POST_TO_COMMUNITY_PAGE
    FOREIGN KEY (POST_ID)
    REFERENCES COMMUNITY_POST (POST_ID);

ALTER TABLE COMMUNITY_POST
  ADD CONSTRAINT FK_MEMBERS_TO_COMMUNITY_POST
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE MATCHING
  ADD CONSTRAINT FK_MEMBERS_TO_MATCHING
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE MATCHING
  ADD CONSTRAINT FK_SURVEY_RESULT_TO_MATCHING
    FOREIGN KEY (SURVEY_RESULT_ID)
    REFERENCES SURVEY_RESULT (SURVEY_RESULT_ID);

ALTER TABLE MEMBER_D
  ADD CONSTRAINT FK_MEMBERS_TO_MEMBER_D
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE MEMBER_D
  ADD CONSTRAINT FK_MEDICALDEPARTMENT_TO_MEMBER_D
    FOREIGN KEY (MEDICALDEPARTMENT_ID)
    REFERENCES MEDICALDEPARTMENT (MEDICALDEPARTMENT_ID);

ALTER TABLE MEMBER_S_F
  ADD CONSTRAINT FK_DEMENTIA_STAGE_TO_MEMBER_S_F
    FOREIGN KEY (STAGE_ID)
    REFERENCES DEMENTIA_STAGE (STAGE_ID);

ALTER TABLE MEMBER_S_F
  ADD CONSTRAINT FK_GENDER_TO_MEMBER_S_F
    FOREIGN KEY (PATIENTGENDER_ID)
    REFERENCES GENDER (GENDER_ID);

ALTER TABLE MEMBER_S_F
  ADD CONSTRAINT FK_MEMBERS_TO_MEMBER_S_F
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE MEMBER_S_F
  ADD CONSTRAINT FK_MEMBERTYPE_TO_MEMBER_S_F
    FOREIGN KEY (MEMBERTYPE_ID)
    REFERENCES MEMBERTYPE (MEMBERTYPE_ID);

ALTER TABLE MEMBERS
  ADD CONSTRAINT FK_GENDER_TO_MEMBERS
    FOREIGN KEY (GENDER_ID)
    REFERENCES GENDER (GENDER_ID);

ALTER TABLE MEMBERS
  ADD CONSTRAINT FK_MEMBERTYPE_TO_MEMBERS
    FOREIGN KEY (MEMBERTYPE_ID)
    REFERENCES MEMBERTYPE (MEMBERTYPE_ID);

ALTER TABLE AUTHS
  ADD CONSTRAINT FK_MEMBERS_TO_AUTHS
    FOREIGN KEY (MEMBERID_USERS)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE AUTHS
  ADD CONSTRAINT FK_AUTH_NAMES_TO_AUTHS
    FOREIGN KEY (MEMBERID_AUTH_NAMES)
    REFERENCES AUTH_NAMES (MEMBERID);

ALTER TABLE SELFTEST_QNA
  ADD CONSTRAINT FK_SELFTEST_CODE_TO_SELFTEST_QNA
    FOREIGN KEY (ST_Q_CODE)
    REFERENCES SELFTEST_CODE (ST_Q_CODE);

ALTER TABLE SELFTEST_QNA
  ADD CONSTRAINT FK_SELFTEST_ANS_CODE_TO_SELFTEST_QNA
    FOREIGN KEY (ST_ANS_SCORE)
    REFERENCES SELFTEST_ANS_CODE (ST_ANS_SCORE);

ALTER TABLE SELFTEST_RESULT
  ADD CONSTRAINT FK_SELFTEST_QNA_TO_SELFTEST_RESULT
    FOREIGN KEY (ST_QNA_CODE)
    REFERENCES SELFTEST_QNA (ST_QNA_CODE);

ALTER TABLE SELFTEST_RESULT
  ADD CONSTRAINT FK_MEMBERS_TO_SELFTEST_RESULT
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE SELFTEST_RESULT
  ADD CONSTRAINT FK_SELFTEST_RESULT_CODE_TO_SELFTEST_RESULT
    FOREIGN KEY (ST_RESULT_CODE)
    REFERENCES SELFTEST_RESULT_CODE (ST_RESULT_CODE);

ALTER TABLE SURVEY_QNA
  ADD CONSTRAINT FK_SURVEY_QUESTIONS_TO_SURVEY_QNA
    FOREIGN KEY (SURVEY_Q_ID)
    REFERENCES SURVEY_QUESTIONS (SURVEY_Q_ID);

ALTER TABLE SURVEY_QUESTIONS
  ADD CONSTRAINT FK_SURVEY_TYPE_TO_SURVEY_QUESTIONS
    FOREIGN KEY (SURVEY_TYPE_ID)
    REFERENCES SURVEY_TYPE (SURVEY_TYPE_ID);

ALTER TABLE SURVEY_RESULT
  ADD CONSTRAINT FK_MEMBERS_TO_SURVEY_RESULT
    FOREIGN KEY (MEMBERID)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE SURVEY_RESULT
  ADD CONSTRAINT FK_SURVEY_QNA_TO_SURVEY_RESULT
    FOREIGN KEY (SURVEY_ANS_ID)
    REFERENCES SURVEY_QNA (SURVEY_ANS_ID);

ALTER TABLE AUTHS
  ADD CONSTRAINT FK_MEMBERS_TO_AUTHS1
    FOREIGN KEY (MEMBER_ID_USERS)
    REFERENCES MEMBERS (MEMBERID);

ALTER TABLE AUTHS
  ADD CONSTRAINT FK_AUTH_NAMES_TO_AUTHS1
    FOREIGN KEY (MEMBER_ID_AUTH_NAMES)
    REFERENCES AUTH_NAMES (MEMBERID);
